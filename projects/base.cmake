MACRO(HEADER_DIRECTORIES return_list)
    FILE(GLOB_RECURSE new_list ../../src/*.h*)
    SET(dir_list "")
    FOREACH(file_path ${new_list})
        GET_FILENAME_COMPONENT(dir_path ${file_path} PATH)
        SET(dir_list ${dir_list} ${dir_path})
    ENDFOREACH()
    LIST(REMOVE_DUPLICATES dir_list)
    SET(${return_list} ${dir_list})
ENDMACRO()

if (WIN32)
    message(STATUS "Compiling for Windows (MSVC)")
    set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreaded")
    set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /MT")
    set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /MTd")
    add_compile_options(/utf-8)
elseif (UNIX)
    message(STATUS "Compiling for Linux (GCC)")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -static-libstdc++ -static-libgcc")
endif()

set(TARGET_BINARY ${PROJECT_NAME})

set(CMAKE_THREAD_PREFER_PTHREAD TRUE)
set(THREADS_PREFER_PTHREAD_FLAG TRUE)
find_package(Threads REQUIRED)

HEADER_DIRECTORIES(SRC_INCLUDE_DIRS)
include_directories (${SRC_INCLUDE_DIRS})

add_executable(${TARGET_BINARY} ${SRCS} ${HDRS})
if (WIN32)
target_link_libraries(${TARGET_BINARY} ${LINK_LIBS} ${CMAKE_DL_LIBS})
elseif (UNIX)
target_link_libraries(${TARGET_BINARY} ${LINK_LIBS} ${CMAKE_DL_LIBS} -static)
endif()

add_custom_target(build DEPENDS ${TARGET_BINARY})
